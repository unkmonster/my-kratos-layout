syntax = "proto3";
package kratos.api;

option go_package = "github.com/go-kratos/kratos-layout/internal/conf;conf";

import "google/protobuf/duration.proto";

// TODO 服务注册 & 发现
message Bootstrap {
  Env env = 1;
  Server server = 2;
  Data data = 3;
  Observability observability = 4;
  Client client = 5;
  App app = 15;
}

enum Env {
  ENV_UNSPECIFIED = 0;
  ENV_DEV = 1;
  ENV_STAGING = 2;
  ENV_PROD = 3;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Database {
    string driver = 1;
    string addr = 2;
    string username = 3;
    string password = 4;
    string protocol = 5;
    string schema = 6;
    string params = 7;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration read_timeout = 3;
    google.protobuf.Duration write_timeout = 4;
    string username = 5;
    string password = 6;
    int32 db = 7;
  }
  Database database = 1;
  Redis redis = 2;
}

message Observability {
  message Trace {
    // host:port grpc endpoint
    string endpoint = 1;
    // 生产环境采样率，仅生产环境
    float production_sample_rate = 2;
  }
  message Metrics {
    // grpc endpoint
    string endpoint = 1;
  }
  Trace trace = 1;
  Metrics metrics = 2;
}

message Client {
  message HTTP {
    int32 retry_count = 1;
  }
  HTTP http = 1;
} 

message App {

}